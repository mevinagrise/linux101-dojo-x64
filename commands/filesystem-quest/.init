#!/usr/bin/env python3

import pathlib
import random
import re
import os

NAMES = [
    "CLUE", "HINT", "README", "NOTE", "TIP", "WHISPER", "SECRET",
    "MESSAGE", "NUGGET", "POINTER", "EVIDENCE", "GIST", "SNIPPET",
    "ALERT", "TEASER", "MEMO", "SPOILER", "INSIGHT", "REVELATION",
    "LEAD", "BLUEPRINT", "CUE", "DISPATCH", "TRACE", "INFO",
    "DOSSIER", "BRIEF"
]
BAD_PATHS = { "home", "proc", "sys", "dev", "root", "nix", "run" }
TYPES = [ 'NORMAL', 'TRAP', 'HIDDEN', 'DELAYED' ]
GREETINGS = [
    "恭喜你，找到线索！",
    "耶，找到我了！",
    "超级发现！",
    "出色的侦探！",
    "今天你是欧皇！"
]

FLAG = pathlib.Path("/flag").read_text().strip()
RND = random.Random(int(re.sub("[^0-9]", "", FLAG) + "1"))

def get_dirs(root):
    for dirpath, dirnames, _ in os.walk(root, topdown=True):
        perm = os.stat(dirpath).st_mode
        if set(dirpath.split("/")) & BAD_PATHS or oct(perm)[-1] != "5":
            dirnames[:] = [ ]
            continue
        yield dirpath

def make_trail(root="/", num_clues=8):
    candidates = list(get_dirs(root))
    clue_locations = RND.sample(candidates, num_clues)
    clue_types = TYPES + RND.sample(TYPES*num_clues, num_clues-len(TYPES))
    clue_names = RND.sample(NAMES, num_clues+1)
    RND.shuffle(clue_types)

    cur_loc = "/"
    for n, (next_loc, next_ty, cur_name) in enumerate(zip(clue_locations, clue_types, clue_names)):
        clue_path = os.path.join(cur_loc, cur_name)
        clue_text = RND.choice(GREETINGS)
        clue_text += "\n下一个线索在: " + next_loc + "\n"
        if next_ty == 'TRAP':
            clue_text += "\n小心！下一个线索是一个**陷阱**。你需要在不进入目录的情况下读取它；否则，线索将自毁！\n"
            clue_names[n+1] = clue_names[n+1] + "-TRAPPED"
        elif next_ty == 'HIDDEN':
            clue_text += "\n下一个线索是**隐藏的**——它的文件名以 '.' 字符开头。你需要使用特殊选项来查找它。\n"
            clue_names[n+1] = "." + clue_names[n+1]
        elif next_ty == 'DELAYED':
            clue_text += "\n下一个线索是**延迟的**——直到你用 'cd' 进入目录，它才会变得可读。\n"

        with open(clue_path, "w") as o:
            o.write(clue_text)

        if n and clue_types[n-1] == "DELAYED":
            os.chmod(clue_path, 0)
            os.chown(clue_path, 1000, 1000)
        elif "TRAPPED" in clue_path:
            os.chown(clue_path, 1000, 1000)

        cur_loc = next_loc

    flag_path = os.path.join(cur_loc, clue_names[-1])
    with open(flag_path, "w") as o:
        o.write("恭喜你！你的坚持得到了回报，你找到了flag！\n")
        o.write("它是: " + FLAG + "\n")

if __name__ == "__main__":
    make_trail()
